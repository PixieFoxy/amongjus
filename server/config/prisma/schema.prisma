generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ********** DATABASE MODELS ********** //

// ********** USER/ACCOUNT MANAGEMENT ********** //

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     Role     @default(USER)
  orders   Order[]
  profile  Profile?
}

model Profile {
  id                Int                @id @default(autoincrement())
  firstName         String?
  lastName          String?
  gender            Gender?
  age               Int                @default(0)
  weight            Int                @default(0)
  height            Int                @default(0)
  bio               String?
  goal              Goal?
  nutritionConsumed ProfileNutrition[]
  userId            Int                @unique
  user              User               @relation(fields: [userId], references: [id])
}

model Goal {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @unique
  target    Int
  desc      String?

  targetNutrition   Nutrition @relation(fields: [targetNutritionId], references: [id])
  targetNutritionId Int       @unique
}

// ********** MENU & PRODUCTS ********** //
// ********** JUICE ********** //

model Juice {
  id          Int              @id @default(autoincrement())
  name        String
  desc        String
  ingredients String[]
  productUrl  String?
  pictureUrl  String?
  price       Int /// Price cannot be a negative number.
  size        Int
  nutrition   JuiceNutrition?
  orderedIn   OrderedProduct[]
}

model Nutrition {
  id      Int     @id @default(autoincrement())
  /// Energy is measured in calories.
  energy  Decimal @db.Decimal(6, 1)
  fat     Decimal @db.Decimal(5, 1) /// Fat is measured in grams. 
  carbs   Decimal @db.Decimal(5, 1) /// Carbs is measured in grams. 
  protein Decimal @db.Decimal(5, 1) /// Protein is measured in grams. 
  fibre   Decimal @db.Decimal(5, 1) /// Fibre is measured in grams. 
  sugar   Decimal @db.Decimal(5, 1) /// Sugar is measured in grams. 
  sodium  Decimal @db.Decimal(5, 1) /// Convert sodium to milligrams when rendering.

  juiceNutrition   JuiceNutrition?
  profileNutrition ProfileNutrition?
  goalUsing        Goal?
}

model JuiceNutrition {
  juice       Juice     @relation(fields: [juiceId], references: [id])
  juiceId     Int       @unique
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])
  nutritionId Int       @unique
}

model ProfileNutrition {
  date        DateTime
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])
  nutritionId Int       @unique
  profile     Profile   @relation(fields: [profileId], references: [id])
  profileId   Int
}

// ********** NON-JUICE ********** //
model Container {
  id         Int              @id @default(autoincrement())
  name       String
  desc       String
  size       Int
  productUrl String?
  pictureUrl String?
  price      Int /// Price cannot be a negative number.
  orderedIn  OrderedProduct[]
}

// ********** ORDER & PAYMENT ********** //
model Order {
  id         Int              @id @default(autoincrement())
  date       DateTime
  customerId Int
  subtotal   Int /// Subtotal must be greater or equal to 0.
  discount   Int? /// Discount must be greater or equal to 0.
  tax        Int /// Tax must be greater or equal to 0.
  total      Int /// Total must be greater or equal to 0.
  customer   User             @relation(fields: [customerId], references: [id])
  products   OrderedProduct[]
}

model OrderedProduct {
  id Int @id @default(autoincrement())

  qty         Int /// Quantity must be greater than zero.
  type        ProductType
  juiceId     Int?
  containerId Int?
  orderId     Int
  container   Container?  @relation(fields: [containerId], references: [id])
  juice       Juice?      @relation(fields: [juiceId], references: [id])
  order       Order       @relation(fields: [orderId], references: [id])
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  male
  female
  other
  none
}

enum ProductType {
  juice
  container
  other
}
